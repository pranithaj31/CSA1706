import math

def tsp(distance_matrix):
    n = len(distance_matrix)
    ALL_VISITED = (1 << n) - 1  # bitmask when all cities visited
    
    memo = [[None] * n for _ in range(1 << n)]

    def visit(city, visited):
        if visited == ALL_VISITED:
            return distance_matrix[city][0]  # return to start

        if memo[visited][city] is not None:
            return memo[visited][city]

        min_cost = math.inf
        for nxt in range(n):
            if visited & (1 << nxt) == 0:
                cost = distance_matrix[city][nxt] + visit(nxt, visited | (1 << nxt))
                min_cost = min(min_cost, cost)

        memo[visited][city] = min_cost
        return min_cost

    return visit(0, 1 << 0)

# Example usage:
distance_matrix = [
    [0, 10, 15, 20],
    [10, 0, 35, 25],
    [15, 35, 0, 30],
    [20, 25, 30, 0]
]

result = tsp(distance_matrix)
print("Minimum travel cost:", result)

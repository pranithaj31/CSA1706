N = 8  # Chessboard size

# Function to print the chessboard
def print_solution(board):
    for row in board:
        print(" ".join("Q" if col else "." for col in row))
    print()

# Check if placing a queen at board[row][col] is safe
def is_safe(board, row, col):
    # Check column
    for i in range(row):
        if board[i][col]:
            return False

    # Check upper-left diagonal
    i, j = row, col
    while i >= 0 and j >= 0:
        if board[i][j]:
            return False
        i -= 1
        j -= 1

    # Check upper-right diagonal
    i, j = row, col
    while i >= 0 and j < N:
        if board[i][j]:
            return False
        i -= 1
        j += 1

    return True

# Solve N-Queens using backtracking
def solve_nqueens(board, row):
    if row == N:
        print_solution(board)
        return True

    res = False
    for col in range(N):
        if is_safe(board, row, col):
            board[row][col] = 1
            res = solve_nqueens(board, row + 1) or res
            board[row][col] = 0  # backtrack
    return res

# Main program
board = [[0 for _ in range(N)] for _ in range(N)]

if not solve_nqueens(board, 0):
    print("No solution exists")

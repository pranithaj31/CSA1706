from collections import deque

# Function to solve Water Jug Problem
def water_jug_bfs(capacity1, capacity2, target):
    visited = set()
    queue = deque([(0, 0)])  # start with both jugs empty

    while queue:
        jug1, jug2 = queue.popleft()
        
        # If target is reached
        if jug1 == target or jug2 == target:
            print("Solution found:")
            print(jug1, jug2)
            return True
        
        # If already visited, skip
        if (jug1, jug2) in visited:
            continue
        visited.add((jug1, jug2))
        
        print("State:", jug1, jug2)
        
        # All possible moves
        possible_states = set()
        
        # 1. Fill Jug1
        possible_states.add((capacity1, jug2))
        
        # 2. Fill Jug2
        possible_states.add((jug1, capacity2))
        
        # 3. Empty Jug1
        possible_states.add((0, jug2))
        
        # 4. Empty Jug2
        possible_states.add((jug1, 0))
        
        # 5. Pour Jug1 → Jug2
        pour = min(jug1, capacity2 - jug2)
        possible_states.add((jug1 - pour, jug2 + pour))
        
        # 6. Pour Jug2 → Jug1
        pour = min(jug2, capacity1 - jug1)
        possible_states.add((jug1 + pour, jug2 - pour))
        
        for state in possible_states:
            if state not in visited:
                queue.append(state)

    print("No solution possible")
    return False

# Main Program
cap1 = int(input("Enter capacity of Jug1: "))
cap2 = int(input("Enter capacity of Jug2: "))
target = int(input("Enter target amount: "))

water_jug_bfs(cap1, cap2, target)

def print_board(board):
    print()
    for i in range(3):
        print(" " + " | ".join(board[i]))
        if i < 2:
            print("---+---+---")
    print()

def is_moves_left(board):
    for row in board:
        if " " in row:
            return True
    return False

def evaluate(board):
    # Check rows for winner
    for row in range(3):
        if board[row][0] == board[row][1] == board[row][2]:
            if board[row][0] == 'X':
                return +10
            elif board[row][0] == 'O':
                return -10

    # Check columns for winner
    for col in range(3):
        if board[0][col] == board[1][col] == board[2][col]:
            if board[0][col] == 'X':
                return +10
            elif board[0][col] == 'O':
                return -10

    # Check diagonals for winner
    if board[0][0] == board[1][1] == board[2][2]:
        if board[0][0] == 'X':
            return +10
        elif board[0][0] == 'O':
            return -10

    if board[0][2] == board[1][1] == board[2][0]:
        if board[0][2] == 'X':
            return +10
        elif board[0][2] == 'O':
            return -10

    # No winner
    return 0

def minimax(board, depth, is_max):
    score = evaluate(board)

    # If Maximizer or Minimizer has won the game return evaluated score
    if score == 10:
        return score - depth  # Prefer faster wins
    if score == -10:
        return score + depth  # Prefer slower losses

    # If no moves left and no winner => draw
    if not is_moves_left(board):
        return 0

    if is_max:
        best = -1000
        for i in range(3):
            for j in range(3):
                if board[i][j] == " ":
                    board[i][j] = 'X'
                    best = max(best, minimax(board, depth + 1, False))
                    board[i][j] = " "
        return best
    else:
        best = 1000
        for i in range(3):
            for j in range(3):
                if board[i][j] == " ":
                    board[i][j] = 'O'
                    best = min(best, minimax(board, depth + 1, True))
                    board[i][j] = " "
        return best

def find_best_move(board):
    best_val = -1000
    best_move = (-1, -1)

    for i in range(3):
        for j in range(3):
            if board[i][j] == " ":
                board[i][j] = 'X'
                move_val = minimax(board, 0, False)
                board[i][j] = " "
                if move_val > best_val:
                    best_val = move_val
                    best_move = (i, j)
    return best_move

def tic_tac_toe():
    board = [[" " for _ in range(3)] for _ in range(3)]
    print("You play as 'O'. AI plays as 'X'.")
    
    while True:
        print_board(board)

        # Human move
        while True:
            try:
                row, col = map(int, input("Enter your move (row and column 1-3): ").split())
                if row < 1 or row > 3 or col < 1 or col > 3:
                    print("Invalid input. Use numbers 1 to 3.")
                    continue
                if board[row-1][col-1] != " ":
                    print("Spot already taken. Try again.")
                    continue
                board[row-1][col-1] = 'O'
                break
            except:
                print("Invalid input. Please enter row and column separated by space.")

        i
